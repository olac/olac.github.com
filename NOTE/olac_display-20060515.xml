<?xml version="1.0"?>
<!-- edited with XML Spy v4.4 U (http://www.xmlspy.com) by Gary Simons (SIL International) -->
<?xml-stylesheet href="../OLAC_doc.xsl" type="text/xsl"?>
<!DOCTYPE OLAC_doc SYSTEM "../OLAC_doc.dtd">
<OLAC_doc>
	<header>
		<status code="draft" type="informational"/>
		<title>Specifications for an OLAC metadata display format and an OLAC-to-OAI_DC
        crosswalk</title>
		<baseName>olac_display</baseName>
		<issued>20060515</issued>
		<previousIssued>20030215</previousIssued>
		<abstract>
			<p>Specifies OLAC_Display, the OLAC metadata display format implemented by the OLAC Aggregator service. This format is a reader-friendly view of OLAC metadata that incorporates attribute values into the element content and translates coded values into display labels. The document further specifies the transformation from OLAC_Display format to OAI_DC format. </p>
		</abstract>
		<editors>Gary Simons, SIL International
        (<url>mailto:gary_simons@sil.org</url>)</editors>
		<copyright>2006 Gary Simons
      (SIL International)</copyright>
		<changes>
			<p>Updated to use ISO 639-3 language codes. The format for extensions (like <tt>olac:language</tt>) in which the <tt>olac:code</tt> has primary status is extended to include the code in brackets at the end of the metadata string. In the OAI_DC version, the bracketted refinement is moved to first position so as not to interfere with the bracketted code value at the end.</p>
		</changes>
	</header>
	<body>
		<section>
			<heading>Introduction</heading>
			<p>In order to improve recall and precision in searching, the OLAC metadata format <cit>OLAC-Metadata</cit> defines an extension method (involving the <tt>xsi:type</tt> and <tt>olac:code</tt> attributes) to support resource description using community-defined controlled vocabularies. Service providers may use these attributes to perform precise searches. However, service providers  need to be able to display metadata records to users in a manner that shows all available  information in an easy-to-read form. This means that information from these attributes must be combined with the element content to produce a display of all information pertaining to a metadata element. It also requires that coded attribute values (such as three-letter language codes) be translated into friendly display forms.</p>
			<p>Transforming OLAC metadata records into such a display format is a non-trivial task that each service provider should not have to implement independently. Thus the OLAC Aggregator <cit>OLACA</cit> offers such a translation service. It supports a metadata format named OLAC_Display. When metadata are harvested using this metadata prefix, the content of any metadata element that uses an extension contains a reader-friendly view of  the information expressed by means of the extension. For instance,</p>
			<eg>http://www.language-archives.org/cgi-bin/olaca3.pl?
   verb=GetRecord&amp;metadataPrefix=olac&amp;identifier=oai:ethnologue.com:AAA</eg>
			<p>will retrieve the metadata in OLAC format as specified in <cit>OLAC-Metadata</cit>, whereas</p>
			<eg>http://www.language-archives.org/cgi-bin/olaca3.pl?
   verb=GetRecord&amp;metadataPrefix=olac_display&amp;identifier=oai:ethnologue.com:AAA</eg>
			<p>retrieves the same metadata record in the reader-friendly format specified in this document.</p>
			<p>In order to participate in the wider Open Archives Initiative (OAI) community of service providers, OLAC data providers must also publish their metadata
        records in the Dublin Core format
        prescribed by the OAI <cit>OAI_DC</cit>. There is no
        need for data providers to store the records in both formats, however, since the information in  the OAI_DC format is
        a subset of the information in the OLAC format. An OAI_DC record may thus be automatically derived
        from an OLAC record. A program that transforms a metadata record from one
        format to another is conventionally called a "crosswalk"; see
        <cit>Day2001</cit> for other examples of crosswalks and pointers to discussions
        of crosswalking issues.</p>
			<p>It turns out that implementing an OLAC-to-OAI_DC crosswalk involves the same kind of transformation of attribute values that is involved in generating the reader-friendly OLAC_Display format. The final section of this paper describes additional transformations performed by the OLAC Aggregator to achieve an OLAC-to-OAI_DC crosswalk. In addition to documenting the  transformation made by the community's centralized OLAC-to-OAI_DC crosswalk, this note can be used as a specification by those who implement an OLAC-to-OAI_DC crosswalk in their own data provider.</p>
		</section>
		<section>
			<heading>Display format strategy</heading>
			<p>The XML schema that implements  OLAC metadata  uses six
        devices for recording information:</p>
			<ol>
				<li>
					<p>The element name (whether of a basic DC element or of a refined element, e.g. <tt>&lt;dc:date&gt;</tt> and <tt>&lt;dcterms:issued&gt;</tt>)</p>
				</li>
				<li>
					<p>The value of a metadata element expressed as XML element
            content</p>
				</li>
				<li>
					<p>The identification (via the <i>xsi:type</i>
            attribute) of a metadata extension that more precisely defines the interpretation of the element</p>
				</li>
				<li>
					<p>A coded value (in the
            <i>olac:code</i> attribute) that is associated with a metadata extension</p>
				</li>
				<li>
					<p>The display label associated with the code value (looked up by the display formatter in the definition of the metadata extension).
            </p>
				</li>
				<li>
					<p>The language of the element content (expressed in the <i>xml:lang</i>
            attribute)</p>
				</li>
			</ol>
			<p>A straightforward  display of OLAC metadata that shows only the element tag and the element content includes only items 1 and 2. But the attribute values in  items 3 and 4 are critical as well, since they qualify and add to the meaning of the element value. Item 5 is equally critical since it is the display label that makes the code value in 4 easier for the human user of the metadata to interpret. Only item 6 can be ignored in producing the  display form of a metadata element.</p>
			<p>It is not sufficient to incorporate the attribute values directly into a presentation of the element content. This is because the attribute values are typically coded values; the display form must therefore translate the coded values to display labels. Furthermore, there should be standard display templates that uses punctuation in a consistent way to set off the various pieces of information. The templates expressed below are based on the following schematic input:</p>
			<eg>&lt;element xsi:type="T" olac:code="C"&gt;Content&lt;/element&gt;</eg>
			<p>There are two display templates, depending on the nature of the <tt>olac:code</tt> attribute.  In some extensions (such as <tt>olac:language</tt>), the code attribute is primary in that it gives a precise value for the metadata element. The element content, if used, provides an "escape hatch" to provide an arbitrary value when an appropriate coded value is not available or to provide additional details. An  element with this kind of extension uses the following template for its display form:</p>
			<eg>Label-for-T: Label-for-C / Content [C]</eg>
			<p>On the other hand, in other extensions (such as <tt>olac:role</tt>), the element content is the value of the metadata element and the code attribute is secondary since it only qualifies the content in some way. An  element with this kind of extension uses the following template for its display form:</p>
			<eg>Label-for-T: Content (label-for-C)</eg>
			<p>When an extension is documented (see section 6 of <cit>OLAC-Metadata</cit>), two pieces of information are defined that allow the OLAC Aggregator to correctly generate the OLAC_Display format:  </p>
			<dl style="table">
				<dt>Label</dt>
				<dd>
					<p>The display label for the extension</p>
				</dd>
				<dt>CodeStatus</dt>
				<dd>
					<p>Whether the code is primary or secondary</p>
				</dd>
			</dl>
			<p>The display labels for the code values are specified in  <tt>olac:label</tt> attributes in the XML schema that enumerates the list of possible code values.</p>
			<p> The
         OLAC_Display format provides the extension information both as  attribute values and as display strings incorporated into the element content.  Thus, the schema for the <tt>olac_display</tt> metadata format supported by the OLAC Aggregator is identical to the schema for the <tt>olac</tt> metadata format. In this way, services that harvest records from the OLAC Aggregator in OLAC_Display format can still use the  attribute values to support high recall and precision in queries, and at the same time have the convenience of all the attribute information being incorporated into the element content in a reader-friendly view.</p>
		</section>
		<section>
			<heading>Examples of  OLAC_Display format</heading>
			<p>This section illustrates a number of OLAC metadata elements and their equivalents in OLAC_Display format. The examples use the following extensions with the two required parameters defined as follows:</p>
			<dl style="table">
				<dt>olac:language</dt>
				<dd>
					<eg>Label:      NULL
CodeStatus: primary</eg>
				</dd>
				<dt>olac:role</dt>
				<dd>
					<eg>Label:      NULL
CodeStatus: secondary</eg>
				</dd>
				<dt>software:os</dt>
				<dd>
					<eg>Label:      Operating system:
CodeStatus: primary</eg>
				</dd>
			</dl>
			<p>For instance, consider the following metadata elements in OLAC format:</p>
			<eg>&lt;dc:language xsi:type"olac:language" olac:code="ybb"/&gt;
&lt;dc:language xsi:type"olac:language" olac:code="ybb"&gt;Dschang&lt;/dc:language&gt;
&lt;dc:creator xsi:type"olac:role" olac:code="editor"&gt;Sapir, Edward&lt;/dc:creator&gt;
&lt;dcterms:requires xsi:type"software:os"&gt;Windows 95 or higher&lt;/dcterms:requires&gt;
&lt;dcterms:requires xsi:type"software:os" olac:code="win2k"/&gt;</eg>
			<p>These have the following equivalents in OLAC_Display format:</p>
			<eg>&lt;dc:language xsi:type"olac:language" olac:code="ybb"&gt;Yemba [ybb]&lt;/dc:language&gt;
&lt;dc:language xsi:type"olac:language" olac:code="ybb"&gt;Yemba / Dschang [ybb]&lt;/dc:language&gt;
&lt;dc:creator xsi:type"olac:role" olac:code="editor"&gt;Sapir, Edward (editor)&lt;/dc:creator&gt;
&lt;dcterms:requires xsi:type"software:os"&gt;Operating system: Windows 95 or higher&lt;/dcterms:requires&gt;
&lt;dcterms:requires xsi:type"software:os" olac:code="win2k"&gt;Operating system: Windows 2000 [win2k]&lt;/dcterms:requires&gt;</eg>
		</section>
		<section>
			<heading>An OLAC-to-OAI_DC crosswalk</heading>
			<p>The OLAC Aggregator also supports the OAI_DC metadata format. It functions as an OLAC-to-OAI_DC crosswalk since it harvests only OLAC metadata and performs the transformation to OAI_DC upon request. Transforming a metadata record from OLAC format to  OLAC_Display format goes most of the way toward implementing the OLAC-to-OAI_DC crosswalk. Three further changes are made to transform an OLAC_Display element to an OAI_DC element:</p>
			<ol>
				<li>
					<p>
						<i>Remove all the attributes.</i>
					</p>
					<p>This can be done without loss of information since the information in the attributes is already incorporated into the element content.</p>
				</li>
				<li>
					<p>
						<i>"Dumb-down" refined element names to their unqualified equivalent.</i>
					</p>
					<p>For each element from the <tt>dcterms</tt> namespace, the tag name is converted to the tag name for the corresponding unqualified element from the <tt>dc</tt> namespace (as defined in <cit>DC-Q</cit>).</p>
				</li>
				<li>
					<p>
						<i>Preserve the refined element names in the element content.</i>
					</p>
					<p>For each element that has been "dumbed-down", preserve the original element name in a bracketed phrase prepended to the element content.</p>
				</li>
			</ol>
			<p>For instance, the five sample metadata elements from the preceding section end up as follows when transformed to OAI_DC format:</p>
			<eg>&lt;dc:language&gt;Yemba [ybb]&lt;/dc:language&gt;
&lt;dc:language&gt;Yemba / Dschang [ybb]&lt;/dc:language&gt;
&lt;dc:creator&gt;Sapir, Edward (editor)&lt;/dc:creator&gt;
&lt;dc:relation&gt;[requires] Operating system: Windows 95 or higher &lt;/dc:relation&gt;
&lt;dc:relation&gt;[requires] Operating system: Windows 2000 [win2k]&lt;/dc:relation&gt;</eg>
		</section>
	</body>
	<todo>
		<p>Section 6 of OLAC-Metadata and the schema for documenting an extension need to add the two pieces of information for controlling the display format: extension label and whether the code is primary or secondary.</p>
		<p>The implementation of olac_display and oai_dc in OLACA needs to be brought into line with this.  Does OLACA read the extension documentation from the XSD files, or should we just load the necessary information via INSERT statements in the database DDL?</p>
		<p>The second-to-last paragraph of section 2 says that olac:label is used in the XML schema for the extension to give the display labels for the codes.  This isn't true yet.</p>
	</todo>
	<references>
		<ref abbrev="Day2001">Day, Michael. Mapping between metadata formats. UK
      Office for Library and Information
      Networking.<br/>&lt;<url>http://www.ukoln.ac.uk/metadata/interoperability/</url>&gt;</ref>
		<ref abbrev="OLACA">OLAC Aggregator Service.<br/>&lt;<url>http://www.language-archives.org/cgi-bin/olaca.pl</url>&gt;</ref>
		<ref abbrev="OLAC-Metadata">OLAC Metadata.<br/>&lt;<url>http://www.language-archives.org/OLAC/metadata.html</url>&gt;</ref>
		<ref abbrev="DC-Q">Dublin Core Qualifiers.<br/>&lt;<url>http://dublincore.org/documents/dcmes-qualifiers/</url>&gt;</ref>
		<ref abbrev="OAI_DC">Dublin Core Metadata Element Set, Version 1.1:
      Reference Description.
      <br/>&lt;<url>http://dublincore.org/documents/1999/07/02/dces/</url>&gt;<br/>XML
      schema for OAI implementation of Dublin Core
      metadata.<br/>&lt;<url>http://www.openarchives.org/OAI/1.1/dc.xsd</url>&gt;</ref>
	</references>
</OLAC_doc>
